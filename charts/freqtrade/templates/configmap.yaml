apiVersion: v1
kind: ConfigMap
metadata:
  name: freq-trade
data:
  strategy.py: |
    # --- Do not remove these libs ---
    from freqtrade.strategy.interface import IStrategy
    from typing import Dict, List
    from functools import reduce
    from pandas import DataFrame
    # --------------------------------
    
    import talib.abstract as ta
    import freqtrade.vendor.qtpylib.indicators as qtpylib
    import numpy  # noqa
    
    
    class Strategy006(IStrategy):
        """
        Strategy 006
        author@: Conor Fennell
        How to use it?
        > python3 ./freqtrade/main.py -s Strategy006
        """
    
        # Minimal ROI designed for the strategy.
        # This attribute will be overridden if the config file contains "minimal_roi"
        minimal_roi = {
             "0": 0.05
        }
    
        # Optimal stoploss designed for the strategy
        # This attribute will be overridden if the config file contains "stoploss"
        stoploss = -99.0
    
        # Optimal ticker interval for the strategy
        ticker_interval = '15m'
    
        # run "populate_indicators" only for new candle
        process_only_new_candles = False
    
        # Experimental settings (configuration will overide these if set)
        use_sell_signal = True
        sell_profit_only = True
        ignore_roi_if_buy_signal = False
    
        # Optional order type mapping
        order_types = {
            'buy': 'limit',
            'sell': 'limit',
            'stoploss': 'market',
            'stoploss_on_exchange': False
        }
    
        def informative_pairs(self):
            """
            Define additional, informative pair/interval combinations to be cached from the exchange.
            These pair/interval combinations are non-tradeable, unless they are part
            of the whitelist as well.
            For more information, please consult the documentation
            :return: List of tuples in the format (pair, interval)
                Sample: return [("ETH/USDT", "5m"),
                                ("BTC/USDT", "15m"),
                                ]
            """
            return []
    
        def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
            """
            Adds several different TA indicators to the given DataFrame
            Performance Note: For the best performance be frugal on the number of indicators
            you are using. Let uncomment only the indicator you are using in your strategies
            or your hyperopt configuration, otherwise you will waste your memory and CPU usage.
            """
            # EMA - Exponential Moving Average
            dataframe['ema8'] = ta.EMA(dataframe, timeperiod=8)
            dataframe['ema13'] = ta.EMA(dataframe, timeperiod=13)
            dataframe['ema21'] = ta.EMA(dataframe, timeperiod=21)
            dataframe['ema55'] = ta.EMA(dataframe, timeperiod=55)
    
            return dataframe
    
        def populate_buy_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
            """
            Based on TA indicators, populates the buy signal for the given dataframe
            :param dataframe: DataFrame
            :return: DataFrame with buy column
            """
            dataframe.loc[
                # Prod
                (
                        (dataframe['ema8'] > dataframe['ema13']) &
                        (dataframe['ema13'] > dataframe['ema21']) &
                        (dataframe['ema21'] > dataframe['ema55'])
                ),
                'buy'] = 1
    
            return dataframe
    
        def populate_sell_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
            """
            Based on TA indicators, populates the sell signal for the given dataframe
            :param dataframe: DataFrame
            :return: DataFrame with buy column
            """
            dataframe.loc[
                # Prod
                (
                        (dataframe['ema8'] < dataframe['ema55'])
                ),
    
                'sell'] = 1
            return dataframe
  config.json: |
    {
      "max_open_trades": 11,
      "stake_currency": "EUR",
      "stake_amount": 100,
      "startup_candle_count": 55,
      "tradable_balance_ratio": 0.99,
      "fiat_display_currency": "EUR",
      "ticker_interval" : "15m",
      "dry_run": false,
      "trailing_stop": false,
      "unfilledtimeout": {
          "buy": 10,
          "sell": 30
      },
      "bid_strategy": {
          "ask_last_balance": 0.0,
          "use_order_book": false,
          "order_book_top": 1,
          "check_depth_of_market": {
              "enabled": false,
              "bids_to_ask_delta": 1
          }
      },
      "ask_strategy":{
          "use_order_book": false,
          "order_book_min": 1,
          "order_book_max": 9,
          "use_sell_signal": true,
          "sell_profit_only": true,
          "ignore_roi_if_buy_signal": false
      },
      "exchange": {
          "name": "kraken",
          "key": "FILL_ME",
          "secret": "FILL_ME",
          "ccxt_config": {"enableRateLimit": true},
          "ccxt_async_config": {
            "enableRateLimit": true,
            "rateLimit": 1000
          },
          "pair_whitelist": [
            "ADA/EUR",
            "ALGO/EUR",
            "ATOM/EUR",
            "BAT/EUR",
            "BCH/EUR",
            "BTC/EUR",
            "DAI/EUR",
            "DASH/EUR",
            "EOS/EUR",
            "ETC/EUR",
            "ETH/EUR",
            "LINK/EUR",
            "LTC/EUR",
            "QTUM/EUR",
            "REP/EUR",
            "WAVES/EUR",
            "XLM/EUR",
            "XMR/EUR",
            "XRP/EUR",
            "XTZ/EUR",
            "ZEC/EUR"
          ],
          "pair_blacklist": []
      },
      "pairlists": [
        {"method": "StaticPairList"}
      ],
      "edge": {
        "enabled": false,
        "process_throttle_secs": 3600,
        "calculate_since_number_of_days": 7,
        "allowed_risk": 0.01,
        "stoploss_range_min": -0.01,
        "stoploss_range_max": -0.1,
        "stoploss_range_step": -0.01,
        "minimum_winrate": 0.60,
        "minimum_expectancy": 0.20,
        "min_trade_number": 10,
        "max_trade_duration_minute": 1440,
        "remove_pumps": false
      },
      "telegram": {
          "enabled": true,
          "token": "FILL_ME",
          "chat_id": "FILL_ME"
      },
      "initial_state": "running",
      "forcebuy_enable": false,
      "internals": {
          "process_throttle_secs": 5
      },
      "download_trades": true
    }